{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compose Routing Rooting in Jetpack Compose Connection repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.routing:compose-routing:{version}\") } Features Navigation dispatcher Navigation route License Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#compose-routing","text":"Rooting in Jetpack Compose","title":"Compose Routing"},{"location":"#connection","text":"repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.routing:compose-routing:{version}\") }","title":"Connection"},{"location":"#features","text":"Navigation dispatcher Navigation route","title":"Features"},{"location":"#license","text":"Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"navigation_dispatcher/","text":"Simplifies working with OnBackPressedDispatcher, monitors Lifecycle and interacts with HorizontalPager. Automates the popStack feature without tracking routing Implementation // Added local static val LocalNavigationDispatcher = staticCompositionLocalOf<NavigationDispatcher> { error(\"No Back Dispatcher provided\") } // Implement NavigationDispatcher in Activity setContent { rememberAnimatedNavController().let { controller -> CompositionLocalProvider( LocalNavigationDispatcher provides NavigationDispatcher( lifecycle = lifecycle, controller = controller, backPressedDispatcher = onBackPressedDispatcher ) ) { AppTheme { NavGraph(controller) } } } } Usage onBackPressed val navigationDispatcher = LocalNavigationDispatcher.current SmallTopAppBar( navigationIcon = { // check if not root destination if (navigationDispatcher.hasEnabledCallbacks()) { IconButton(onClick = { scope.launch { // if has callbacks we can press back navigationDispatcher.onBackPressed() } }) { Icon( imageVector = Icons.Filled.ArrowBack, contentDescription = \"Back\", tint = MaterialTheme.colorScheme.onPrimaryContainer ) } } } ) Usage with HorizontalPager val state = rememberPagerState() val scope = rememberCoroutineScope() val navigationDispatcher = LocalNavigationDispatcher.current // set pager for navigation navigationDispatcher.setPager(scope, state) // listen change pager navigationDispatcher.listenChangePager(scope) { // it - page id } // enable onBackPressed for pager - default enable navigationDispatcher.enablePager() // disable onBackPressed for pager navigationDispatcher.disablePager() Usage toRoutePopStack val navigationDispatcher = LocalNavigationDispatcher.current /** * To welcome page */ fun toWelcome() { controller.navigate(OtherNavRoute.welcome.default.route) } /** * To login page */ fun toSignIn() { controller.navigate(OtherNavRoute.signIn.default.route) } // clear back stack and open Welcome page + SignIn page navigationDispatcher.toRoutePopStack(::toWelcome, ::toSignIn)","title":"Navigation dispatcher"},{"location":"navigation_dispatcher/#implementation","text":"// Added local static val LocalNavigationDispatcher = staticCompositionLocalOf<NavigationDispatcher> { error(\"No Back Dispatcher provided\") } // Implement NavigationDispatcher in Activity setContent { rememberAnimatedNavController().let { controller -> CompositionLocalProvider( LocalNavigationDispatcher provides NavigationDispatcher( lifecycle = lifecycle, controller = controller, backPressedDispatcher = onBackPressedDispatcher ) ) { AppTheme { NavGraph(controller) } } } }","title":"Implementation"},{"location":"navigation_dispatcher/#usage-onbackpressed","text":"val navigationDispatcher = LocalNavigationDispatcher.current SmallTopAppBar( navigationIcon = { // check if not root destination if (navigationDispatcher.hasEnabledCallbacks()) { IconButton(onClick = { scope.launch { // if has callbacks we can press back navigationDispatcher.onBackPressed() } }) { Icon( imageVector = Icons.Filled.ArrowBack, contentDescription = \"Back\", tint = MaterialTheme.colorScheme.onPrimaryContainer ) } } } )","title":"Usage onBackPressed"},{"location":"navigation_dispatcher/#usage-with-horizontalpager","text":"val state = rememberPagerState() val scope = rememberCoroutineScope() val navigationDispatcher = LocalNavigationDispatcher.current // set pager for navigation navigationDispatcher.setPager(scope, state) // listen change pager navigationDispatcher.listenChangePager(scope) { // it - page id } // enable onBackPressed for pager - default enable navigationDispatcher.enablePager() // disable onBackPressed for pager navigationDispatcher.disablePager()","title":"Usage with HorizontalPager"},{"location":"navigation_dispatcher/#usage-toroutepopstack","text":"val navigationDispatcher = LocalNavigationDispatcher.current /** * To welcome page */ fun toWelcome() { controller.navigate(OtherNavRoute.welcome.default.route) } /** * To login page */ fun toSignIn() { controller.navigate(OtherNavRoute.signIn.default.route) } // clear back stack and open Welcome page + SignIn page navigationDispatcher.toRoutePopStack(::toWelcome, ::toSignIn)","title":"Usage toRoutePopStack"},{"location":"navigation_route/","text":"Simplifies and systematizes the work with routing Implementation interface /** * Routing for [ReposScreen] */ object RepoRoute { val screen = object : NavigationRoute { override val route: String = \"RepoRouteScreen\" } val screenWithId = object : NavigationRouteArgument1 { override val argument0: String = \"id\" override val route: String = \"RepoRouteScreenWithId/{$argument0}\" } val screenWithIdAndUrl = object : NavigationRouteArgument2 { override val argument0: String = \"id\" override val argument1: String = \"url\" override val route: String = \"RepoRouteScreenWithIdAndUrl/{$argument0}/{$argument1}\" } } Usage /** * To repo view */ fun toRepo() { controller.navigate(ReposNavRoute.repo.screen.route) } /** * To repo view by ID */ fun toRepo(id: String) { with(ReposNavRoute.repo.screenWithId) { controller.navigate(routeWithArguments(argument0 = id)) } } /** * To repo view by ID and Uri */ fun toRepo(id: String, url: Uri) { with(ReposNavRoute.repo.screenWithIdAndUrl) { controller.navigate(routeWithArguments( argument0 = id, argument1 = URLEncoder.encode(url.toString(), Charsets.UTF_8.name()) )) } }","title":"Navigation route"},{"location":"navigation_route/#implementation-interface","text":"/** * Routing for [ReposScreen] */ object RepoRoute { val screen = object : NavigationRoute { override val route: String = \"RepoRouteScreen\" } val screenWithId = object : NavigationRouteArgument1 { override val argument0: String = \"id\" override val route: String = \"RepoRouteScreenWithId/{$argument0}\" } val screenWithIdAndUrl = object : NavigationRouteArgument2 { override val argument0: String = \"id\" override val argument1: String = \"url\" override val route: String = \"RepoRouteScreenWithIdAndUrl/{$argument0}/{$argument1}\" } }","title":"Implementation interface"},{"location":"navigation_route/#usage","text":"/** * To repo view */ fun toRepo() { controller.navigate(ReposNavRoute.repo.screen.route) } /** * To repo view by ID */ fun toRepo(id: String) { with(ReposNavRoute.repo.screenWithId) { controller.navigate(routeWithArguments(argument0 = id)) } } /** * To repo view by ID and Uri */ fun toRepo(id: String, url: Uri) { with(ReposNavRoute.repo.screenWithIdAndUrl) { controller.navigate(routeWithArguments( argument0 = id, argument1 = URLEncoder.encode(url.toString(), Charsets.UTF_8.name()) )) } }","title":"Usage"}]}